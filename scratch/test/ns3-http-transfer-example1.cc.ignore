/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */


#include <iostream>
#include <fstream>
#include <sstream>
#include <string>


#include "ns3/core-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/network-module.h"
#include "ns3/applications-module.h"
#include "ns3/dash-streaming-module.h"
#include "ns3/wifi-module.h"
#include "ns3/mobility-module.h"
#include "ns3/csma-module.h"
#include "ns3/internet-module.h"
#include "ns3/node-throughput-tracer.h"
#include "ns3/ipv4-static-routing-helper.h"
#include "ns3/tap-bridge-module.h"


using namespace std;
using namespace ns3;

#include <unistd.h>
#include <iostream>

std::string GetCurrentWorkingDir( void ) {
  char buff[250];
  char* cwd = getcwd( buff, 250 );
  std::cout << cwd;
  std::string current_working_dir(buff);
  return current_working_dir;
}

NS_LOG_COMPONENT_DEFINE ("HttpClientServerTransferExample");

int main (int argc, char *argv[])
{
  // LogComponentEnable("TapBridge",LOG_LEVEL_INFO);
  GlobalValue::Bind ("SimulatorImplementationType", StringValue ("ns3::RealtimeSimulatorImpl"));
  GlobalValue::Bind ("ChecksumEnabled", BooleanValue (true));

  //Config::SetDefault ("ns3::TcpL4Protocol::SocketType", StringValue ("ns3::TcpNewReno"));
  // Configure TCP and MTU
  Config::SetDefault("ns3::TcpSocket::SegmentSize", UintegerValue (1430)); // 1460 is too large it seems
  Config::SetDefault("ns3::PointToPointNetDevice::Mtu", UintegerValue (1500)); // ETHERNET MTU
  Config::SetDefault("ns3::TcpL4Protocol::SocketType", StringValue("ns3::TcpNewReno")); // default

  // Configure Network Speed etc...
  Config::SetDefault("ns3::PointToPointNetDevice::DataRate", StringValue("1Mbps"));
  Config::SetDefault("ns3::PointToPointChannel::Delay", StringValue("10ms"));

  Config::SetDefault ("ns3::QueueBase::MaxSize", QueueSizeValue (QueueSize (QueueSizeUnit::PACKETS, 20)));
  // Config::SetDefault("ns3::DropTailQueue::MaxPackets", UintegerValue (80));

  CommandLine cmd;
  cmd.Parse (argc, argv);

  // Create a 3 node network: client(0) <---> router(1) <---> server(2)
  NodeContainer nodes;
  nodes.Create (3);

  // Name the nodes
  Names::Add("Client", nodes.Get(0));
  Names::Add("Router", nodes.Get(1));
  Names::Add("Server", nodes.Get(2));


  // Create client <--> csma node
  NodeContainer csmaNodes;
  csmaNodes.Create (1);
  csmaNodes.Add (nodes.Get(0));

  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", DataRateValue (5000000));
  csma.SetChannelAttribute ("Delay", TimeValue (MilliSeconds (2)));
  // NetDeviceContainer serverCsmaDevices = csma.Install (NodeContainer(nodes.Get(2), csmaNodes.Get(1)));
  NetDeviceContainer clientCsmaDevices = csma.Install (csmaNodes);

  PointToPointHelper p2p; // settings are already defined above
  // Connect client(0) <---> router(1)
  NetDeviceContainer clientToRouterDevices =  p2p.Install (nodes.Get(0), nodes.Get(1));

  // Connect router(1) <---> server(2)
  NetDeviceContainer serverToRouterDevices =
  p2p.Install (nodes.Get(2), nodes.Get(1));

  // Now add ip/tcp stack to all nodes.
  Ipv4StaticRoutingHelper staticRouting;
  InternetStackHelper internet;
  internet.SetRoutingHelper(staticRouting);
  internet.InstallAll ();

  // Assign IP Addresses for client(0) <---> router(1)
  Ipv4AddressHelper address;
  address.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer clientInterfaces = address.Assign (clientToRouterDevices);
  Ipv4Address clientAddress (clientInterfaces.GetAddress (0));


  // Assign IP Addresses for server(2) <---> router(1)
  address.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer serverInterfaces = address.Assign (serverToRouterDevices);
  // Get the servers IP address
  Ipv4Address serverAddress (serverInterfaces.GetAddress (0));

  address.SetBase ("10.0.0.0", "255.255.255.0");
  Ipv4InterfaceContainer csmaInterfaces = address.Assign (clientCsmaDevices);
  Ipv4Address csmaAddress (csmaInterfaces.GetAddress (0));

  NS_LOG_UNCOND("ServerAddress=" << serverAddress);
  NS_LOG_UNCOND("ClientAddress=" << clientAddress);
  NS_LOG_UNCOND("TapAddress=" << csmaAddress);

  // Create HTTP Server
  std::string representationStrings = GetCurrentWorkingDir() + "/../content/segments/BigBuckBunny/bunny_2s/dash_dataset_avc_bbb.csv";
  fprintf(stderr, "representations = %s\n", representationStrings.c_str());

  DASHServerHelper server(Ipv4Address::GetAny (), 80,  "localhost", "/content/segments/BigBuckBunny/bunny_2s/", representationStrings, "/content/segments/BigBuckBunny/bunny_2s/");

  /*HttpServerHelper server(Ipv4Address::GetAny (), 80, ".", "localhost");
  server.SetAttribute("MetaDataFile", StringValue("fake_fileserver_list.csv"));
  server.SetAttribute("MetaDataDirectory", StringValue("/fake"));*/

  ApplicationContainer apps = server.Install (nodes.Get(2));
  UdpEchoServerHelper echoServer (9);
  ApplicationContainer serverApps = echoServer.Install (nodes.Get (2));
  serverApps.Start (Seconds (1.0));

  // Create HTTP Client
  /*
  HttpClientHelper client(serverAddress, 80,
    "content/segments/BigBuckBunny/bunny_2s/vid1.mpd.gz", "localhost");
  client.Install(nodes.Get(0));
  Simulator::Schedule(Seconds(2), &Ipv4::SetUp, nodes.Get(1)->GetObject<Ipv4> (), 2);
   */
  UdpEchoClientHelper echoClient (serverAddress, 9);
  echoClient.SetAttribute ("MaxPackets", UintegerValue (1));
  echoClient.SetAttribute ("Interval", TimeValue (Seconds (1.0)));
  echoClient.SetAttribute ("PacketSize", UintegerValue (1024));
  ApplicationContainer clientApps = echoClient.Install (csmaNodes.Get (0));

  apps.Start (Seconds (2));
  clientApps.Start (Seconds (2));

  fprintf(stderr, "Installing Routing Tables manually\n");
  // Configure Server to send all packets back via interface 1
  Ptr<Ipv4> ipv4Server = nodes.Get(2)->GetObject<Ipv4> ();
  Ptr<Ipv4StaticRouting> staticRoutingServer = staticRouting.GetStaticRouting (ipv4Server);
  staticRoutingServer->AddNetworkRouteTo(Ipv4Address("0.0.0.0"), Ipv4Mask("/0"),
  Ipv4Address("10.1.2.1"), 1, 0);

  // Configure Access Router to send all packets for 10.1.1.1 via interface ...
  Ptr<Ipv4> ipv4Router = nodes.Get(1)->GetObject<Ipv4> ();
  Ptr<Ipv4StaticRouting> staticRoutingRouter = staticRouting.GetStaticRouting (ipv4Router);
  staticRoutingRouter->AddHostRouteTo(serverAddress, serverAddress, 1, 0);

  Ptr<Ipv4> ipv4Client = nodes.Get(0)->GetObject<Ipv4> ();
  Ptr<Ipv4StaticRouting> staticRoutingClient = staticRouting.GetStaticRouting (ipv4Client);
  // client to server --> via interface 1
  staticRoutingClient->AddHostRouteTo(serverAddress, 1, 0);
  staticRoutingClient->AddHostRouteTo(csmaAddress, csmaAddress, 1, 0);
  // staticRoutingClient->AddNetworkRouteTo(Ipv4Address("10.1.2.0"), Ipv4Mask("/24"), Ipv4Address("10.0.0.1"), 1, 0);

  // configure the router so it can have a route to the client
  Ptr<Ipv4> ipv4Csma = csmaNodes.Get(0)->GetObject<Ipv4> ();
  Ptr<Ipv4StaticRouting> staticRoutingCsma = staticRouting.GetStaticRouting (ipv4Csma);
  staticRoutingCsma->AddNetworkRouteTo(Ipv4Address("0.0.0.0"), Ipv4Mask("/0"),
  Ipv4Address("10.0.0.1"), 1, 0);
  //Simulator::Schedule(Seconds(starttimeClient[i]-0.1), &SetupClientRoutingEntry, staticRoutingRouter, i);


  TapBridgeHelper tapBridge;
  tapBridge.SetAttribute ("Mode", StringValue ("UseBridge"));
  tapBridge.SetAttribute ("DeviceName", StringValue ("tap-left"));
  tapBridge.Install (csmaNodes.Get (0), clientCsmaDevices.Get (0));

  NS_LOG_UNCOND("Installing Routing Tables");
  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();

  AsciiTraceHelper ascii;
  p2p.EnableAsciiAll (ascii.CreateFileStream ("demo.tr"));
  p2p.EnablePcapAll ("demo");
  Ipv4GlobalRoutingHelper::PrintRoutingTableEvery(Seconds (2), csmaNodes.Get (0), ascii.CreateFileStream ("csmaRoutingTable.txt"), Time::S);
  Ipv4GlobalRoutingHelper::PrintRoutingTableEvery(Seconds (2), nodes.Get (0), ascii.CreateFileStream ("clientRoutingTable.txt"), Time::S);
  Ipv4GlobalRoutingHelper::PrintRoutingTableEvery(Seconds (2), nodes.Get (1), ascii.CreateFileStream ("routerRoutingTable.txt"), Time::S);
  Ipv4GlobalRoutingHelper::PrintRoutingTableEvery(Seconds (2), nodes.Get (2), ascii.CreateFileStream ("serverRoutingTable.txt"), Time::S);
    //Ipv4GlobalRoutingHelper::RecomputeRoutingTables ();

  // Finally, set up the simulator to run.  The 1000 second hard limit is a
  // failsafe in case some change above causes the simulation to never end
  Simulator::Stop (Seconds (600));
  Simulator::Run ();
  Simulator::Destroy ();

  std::cout << "Done!" << std::endl;
}
