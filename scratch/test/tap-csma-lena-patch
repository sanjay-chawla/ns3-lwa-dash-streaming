diff --git a/scratch/test/tap-lena-virtual-device.cc b/scratch/test/tap-lena-virtual-device.cc
new file mode 100644
index 0000000..6244006
--- /dev/null
+++ b/scratch/test/tap-lena-virtual-device.cc
@@ -0,0 +1,552 @@
+/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+//
+// This is an illustration of how one could use virtualization techniques to
+// allow running applications on virtual machines talking over simulated
+// networks.
+//
+// The actual steps required to configure the virtual machines can be rather
+// involved, so we don't go into that here.  Please have a look at one of
+// our HOWTOs on the nsnam wiki for more details about how to get the
+// system confgured.  For an example, have a look at "HOWTO Use Linux
+// Containers to set up virtual networks" which uses this code as an
+// example.
+//
+// The configuration you are after is explained in great detail in the
+// HOWTO, but looks like the following:
+//
+//  +----------+                           +----------+
+//  | virtual  |                           | virtual  |
+//  |  Linux   |                           |  Linux   |
+//  |   Host   |                           |   Host   |
+//  |          |                           |          |
+//  |   eth0   |                           |   eth0   |
+//  +----------+                           +----------+
+//       |                                      |
+//  +----------+                           +----------+
+//  |  Linux   |                           |  Linux   |
+//  |  Bridge  |                           |  Bridge  |
+//  +----------+                           +----------+
+//       |                                      |
+//  +------------+                       +-------------+
+//  | "tap-left" |                       | "tap-right" |
+//  +------------+                       +-------------+
+//       |           n0            n1           |
+//       |       +--------+    +--------+       |
+//       +-------|  tap   |    |  tap   |-------+
+//               | bridge |    | bridge |
+//               +--------+    +--------+
+//               |  CSMA  |    |  CSMA  |
+//               +--------+    +--------+
+//                   |             |
+//                   |             |
+//                   |             |
+//                   ===============
+//                      CSMA LAN
+//
+#include <iostream>
+#include <fstream>
+
+#include "ns3/realtime-simulator-impl.h"
+#include "ns3/core-module.h"
+#include "ns3/network-module.h"
+#include "ns3/csma-module.h"
+#include "ns3/tap-bridge-module.h"
+#include "ns3/internet-module.h"
+#include "ns3/node-throughput-tracer.h"
+#include "ns3/ipv4-static-routing-helper.h"
+#include "ns3/point-to-point-module.h"
+#include "ns3/applications-module.h"
+#include "ns3/dash-streaming-module.h"
+#include "ns3/config-store-module.h"
+#include "ns3/lte-helper.h"
+#include "ns3/epc-helper.h"
+#include "ns3/lte-module.h"
+#include "ns3/mobility-module.h"
+#include "ns3/buildings-module.h"
+#include "ns3/building-position-allocator.h"
+#include "ns3/netanim-module.h"
+
+using namespace std;
+using namespace ns3;
+
+#include <unistd.h>
+#include <iostream>
+#include <fstream>
+
+
+std::string GetCurrentWorkingDir( void ) {
+  char buff[250];
+  char* cwd = getcwd( buff, 250 );
+  std::cout << cwd;
+  std::string current_working_dir(buff);
+  return current_working_dir;
+}
+
+template <typename T>
+std::string ToString(T val)
+{
+    std::stringstream stream;
+    stream << val;
+    return stream.str();
+}
+
+
+NS_LOG_COMPONENT_DEFINE ("TapLenaVirtualMachineExample");
+
+int
+main (int argc, char *argv[])
+{
+
+  LogComponentEnable ("TapLenaVirtualMachineExample", LOG_LEVEL_ALL);
+  LogComponentEnable ("DASHFakeServerApplication", LOG_LEVEL_ALL);
+  LogComponentEnable ("HttpServerApplication", LOG_LEVEL_ALL);
+  LogComponentEnable ("ns3.DASHPlayerTracer", LOG_LEVEL_ALL);
+  LogComponentEnable ("MultimediaConsumer", LOG_LEVEL_ALL);
+  LogComponentEnable ("HttpClientApplication", LOG_LEVEL_ALL);
+
+  uint16_t numberOfEnbs = 2;
+  double distance = 60.0;
+  Time interPacketInterval = MilliSeconds (100);
+  bool useCa = false;
+  bool disableDl = false;
+  bool disableUl = false;
+  bool disablePl = true;
+  uint32_t simulationId = 1;
+  uint32_t numberOfClients = 5;
+  double simTime = 10.1;
+
+  CommandLine cmd;
+  cmd.AddValue("numberOfEnbs", "Number of eNBs", numberOfEnbs);
+  cmd.AddValue("numberOfClients", "Number of UEs in total", numberOfClients);
+  cmd.AddValue("simTime", "Total duration of the simulation [s])", simTime);
+  cmd.AddValue("distance", "Distance between eNBs [m]", distance);
+  cmd.AddValue("interPacketInterval", "Inter packet interval [ms])", interPacketInterval);
+  cmd.Parse (argc, argv);
+
+  //
+  // We are interacting with the outside, real, world.  This means we have to
+  // interact in real-time and therefore means we have to use the real-time
+  // simulator and take the time to calculate checksums.
+  //
+  GlobalValue::Bind ("SimulatorImplementationType", StringValue ("ns3::RealtimeSimulatorImpl"));
+  GlobalValue::Bind ("ChecksumEnabled", BooleanValue (true));
+  // NOTE: if you go in real time I strongly advise to use
+    // --ns3::RealtimeSimulatorImpl::SynchronizationMode=HardLimit
+    // I've seen that if BestEffort is used things can break
+    // (even simple stuff such as ARP)
+  // Config::SetDefault("ns3::RealtimeSimulatorImpl::SynchronizationMode", StringValue("HardLimit"));
+  // Config::SetDefault("ns3::RealtimeSimulatorImpl::HardLimit", TimeValue(Seconds(5)));
+
+  // let's speed things up, we don't need these details for this scenario
+  Config::SetDefault ("ns3::LteSpectrumPhy::CtrlErrorModelEnabled", BooleanValue (false));
+  Config::SetDefault ("ns3::LteSpectrumPhy::DataErrorModelEnabled", BooleanValue (false));
+
+
+  Config::SetDefault("ns3::TcpSocket::SegmentSize", UintegerValue (1446));
+  Config::SetDefault("ns3::TcpSocket::SndBufSize", UintegerValue (524288));
+  Config::SetDefault("ns3::TcpSocket::RcvBufSize", UintegerValue (524288));
+  if (useCa)
+     {
+       Config::SetDefault ("ns3::LteHelper::UseCa", BooleanValue (useCa));
+       Config::SetDefault ("ns3::LteHelper::NumberOfComponentCarriers", UintegerValue (2));
+       Config::SetDefault ("ns3::LteHelper::EnbComponentCarrierManager", StringValue ("ns3::RrComponentCarrierManager"));
+     }
+  ConfigStore inputConfig;
+  inputConfig.ConfigureDefaults();
+
+  // parse again so you can override default values from the command line
+  cmd.Parse(argc, argv);
+
+  //
+  // Use a CsmaHelper to get a CSMA channel created, and the needed net
+  // devices installed on both of the nodes.  The data rate and delay for the
+  // channel can be set through the command-line parser.  For example,
+  //
+  // ./waf --run "tap=csma-virtual-machine --ns3::CsmaChannel::DataRate=10000000"
+  //
+
+  Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();
+  Ptr<PointToPointEpcHelper>  epcHelper = CreateObject<PointToPointEpcHelper> ();
+  lteHelper->SetEpcHelper (epcHelper);
+  epcHelper->Initialize ();
+
+  Ptr<Node> pgw = epcHelper->GetPgwNode ();
+  Names::Add("PGW", pgw);
+
+   // Create a single RemoteHost
+  NodeContainer remoteHostContainer;
+  remoteHostContainer.Create (1);
+  Ptr<Node> remoteHost = remoteHostContainer.Get (0);
+  Names::Add("RemoteHost", remoteHost);
+
+  CsmaHelper csma;
+  NodeContainer csmaNodes;
+  csmaNodes.Add(remoteHost);
+  csmaNodes.Create(1);
+
+  InternetStackHelper internet;
+  // internet.Install (remoteHostContainer);
+  internet.Install (csmaNodes);
+  NetDeviceContainer devicesRight = csma.Install (csmaNodes);
+  Ipv4AddressHelper ipv4Right;
+  ipv4Right.SetBase ("10.1.3.0", "255.255.255.0");
+  Ipv4InterfaceContainer interfacesRight = ipv4Right.Assign (devicesRight);
+
+  // Create the Internet
+  PointToPointHelper p2ph;
+  p2ph.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
+  p2ph.SetDeviceAttribute ("Mtu", UintegerValue (1500));
+  p2ph.SetChannelAttribute ("Delay", TimeValue (Seconds (0.010)));
+  NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);
+  Ipv4AddressHelper ipv4h;
+  ipv4h.SetBase ("1.0.0.0", "255.0.0.0");
+  Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);
+  // interface 0 is localhost, 1 is the p2p device
+  Ipv4Address remoteHostAddr = internetIpIfaces.GetAddress (1);
+
+  Ipv4StaticRoutingHelper ipv4RoutingHelper;
+  Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (remoteHost->GetObject<Ipv4> ());
+  remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("7.0.0.0"), Ipv4Mask ("255.0.0.0"), 1);
+
+  Ptr<Ipv4StaticRouting> tapStaticRouting = ipv4RoutingHelper.GetStaticRouting (pgw->GetObject<Ipv4> ());
+  tapStaticRouting->AddNetworkRouteTo (Ipv4Address ("10.1.3.0"), Ipv4Mask ("255.255.255.0"), remoteHostAddr, 3);
+
+  NodeContainer ueNodes;
+  NodeContainer enbNodes;
+  NodeContainer allNodes;
+  enbNodes.Create(numberOfEnbs);
+  ueNodes.Create(numberOfClients);
+  allNodes.Add (enbNodes);
+  allNodes.Add (ueNodes);
+
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+  //// Set up Building
+  //////////////////////////////////////////////////////////////////////////////////////////////////
+  double roomHeight = 3;
+  double roomLength = 6;
+  double roomWidth = 5;
+  uint32_t xRooms = 8;
+  uint32_t yRooms = 3;
+  uint32_t nFloors = 6;
+
+  Ptr<Building> b = CreateObject <Building> ();
+  b->SetBoundaries (Box ( 0.0, xRooms * roomWidth,
+                          10.0, yRooms * roomLength,
+                          0.0, nFloors * roomHeight));
+  b->SetBuildingType (Building::Office);
+  b->SetExtWallsType (Building::ConcreteWithWindows);
+  b->SetNFloors (6);
+  b->SetNRoomsX (8);
+  b->SetNRoomsY (3);
+
+  Ptr<Building> b2 = CreateObject <Building> ();
+  b2->SetBoundaries (Box ( 50.0, xRooms * roomWidth,
+   							10.0, yRooms * roomLength,
+   							0.0, nFloors * roomHeight));
+  b2->SetBuildingType (Building::Office);
+  b2->SetExtWallsType (Building::ConcreteWithWindows);
+  b2->SetNFloors (7);
+  b2->SetNRoomsX (6);
+  b2->SetNRoomsY (4);
+
+  // Install Mobility Model
+  Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
+
+  Ptr<RandomBuildingPositionAllocator> randPosAlloc = CreateObject<RandomBuildingPositionAllocator> ();
+  randPosAlloc->AssignStreams (simulationId);
+
+  /*// create folder so we can log the positions of the clients
+  const char * mylogsDir = dashLogDirectory.c_str();
+  mkdir (mylogsDir, 0775);
+  std::string algodirstr (dashLogDirectory +  adaptationAlgo );
+  const char * algodir = algodirstr.c_str();
+  mkdir (algodir, 0775);
+  std::string dirstr (dashLogDirectory + adaptationAlgo + "/" + ToString (numberOfClients) + "/");
+  const char * dir = dirstr.c_str();
+  mkdir(dir, 0775);*/
+
+  NS_LOG_DEBUG("before enB position");
+
+  /*std::ofstream clientPosLog;
+  std::string clientPos = dashLogDirectory + "/" + adaptationAlgo + "/" + ToString (numberOfClients) + "/" + "sim" + ToString (simulationId) + "_"  + "clientPos.txt";
+  clientPosLog.open (clientPos.c_str());
+  NS_ASSERT_MSG (clientPosLog.is_open(), "Couldn't open clientPosLog file");
+  */
+
+
+  NS_LOG_DEBUG("before ue position");
+  // allocate static positions
+  positionAlloc->Add(Vector(45, -20, 0)); // pgw
+  // positionAlloc->Add(Vector(90, -40, 0)); //
+  // positionAlloc->Add(Vector(90, -60, 0)); //
+  positionAlloc->Add(Vector(45, -70, 0)); // remotehost
+  positionAlloc->Add(Vector(45, -80, 0)); // csma
+  // allocate Enb positions
+  for (uint i = 0; i < numberOfEnbs; i++) {
+	  positionAlloc->Add(Vector(i*60+30, 50.0, 50.0));
+  }
+  // allocate clients to positions
+  /*for (uint i = 0; i < numberOfClients; i++)
+    {
+      Vector pos = Vector (randPosAlloc->GetNext());
+      positionAlloc->Add (pos);
+
+      // log client positions
+      // clientPosLog << ToString(pos.x) << ", " << ToString(pos.y) << ", " << ToString(pos.z) << "\n";
+      // clientPosLog.flush ();
+    }*/
+
+  NS_LOG_DEBUG("before mobility set");
+  MobilityHelper staticMobility;
+  staticMobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
+  staticMobility.SetPositionAllocator(positionAlloc);
+  staticMobility.Install (pgw);
+  staticMobility.Install (csmaNodes);
+  staticMobility.Install (enbNodes);
+
+  MobilityHelper dynamicMobility;
+  dynamicMobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
+  dynamicMobility.SetPositionAllocator(randPosAlloc);
+  dynamicMobility.Install (ueNodes);
+
+  BuildingsHelper::Install (pgw);
+  BuildingsHelper::Install (csmaNodes);
+  BuildingsHelper::Install (enbNodes);
+  BuildingsHelper::Install (ueNodes);
+  BuildingsHelper::MakeMobilityModelConsistent ();
+
+  NS_LOG_DEBUG("after mobility consistent");
+
+
+  // Install LTE Devices to the nodes
+  NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
+  NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);
+
+  // Install the IP stack on the UEs
+  internet.Install (ueNodes);
+  Ipv4InterfaceContainer ueIpIface;
+  ueIpIface = epcHelper->AssignUeIpv4Address (ueLteDevs);
+  // Assign IP address to UEs, and install applications
+  for (uint32_t u = 0; u < ueNodes.GetN (); ++u)
+    {
+      Ptr<Node> ueNode = ueNodes.Get (u);
+      // Set the default gateway for the UE
+      Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueNode->GetObject<Ipv4> ());
+      ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);
+      if (u == 0){
+    	  ueStaticRouting->AddNetworkRouteTo(Ipv4Address ("10.1.3.0"), Ipv4Mask ("255.255.255.0"), epcHelper->GetUeDefaultGatewayAddress (), 1);
+      }
+    }
+
+
+  lteHelper->Attach(ueLteDevs);
+
+  // Install and start applications on UEs and remote host
+  uint16_t port = 80;
+  uint16_t dlPort = 1100;
+  uint16_t ulPort = 2000;
+  uint16_t otherPort = 3000;
+  ApplicationContainer serverApps;
+  //  ApplicationContainer clientApps;
+
+  /* Install TCP Receiver on the access point */
+
+  /*std::string representationStrings = GetCurrentWorkingDir() + "/../content/segments/BigBuckBunny/bunny_2s/dash_dataset_avc_bbb.csv";
+  fprintf(stderr, "representations = %s\n", representationStrings.c_str());
+  DASHServerHelper server(Ipv4Address::GetAny(), port,  "localhost", "/content/segments/BigBuckBunny/bunny_2s/", representationStrings, "/content/segments/BigBuckBunny/bunny_2s/");
+  ApplicationContainer serverApps = server.Install (remoteHost);
+  serverApps.Start (Seconds (1.0));*/
+
+  /*HttpServerHelper server(Ipv4Address::GetAny (), 80, ".", "localhost");
+  server.SetAttribute("MetaDataFile", StringValue("fake_fileserver_list.csv"));
+  server.SetAttribute("MetaDataDirectory", StringValue("/fake"));*/
+
+  /*
+  PacketSinkHelper sink ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), port));
+  serverApps = sink.Install (remoteHost);
+  serverApps.Start (Seconds (1.0));
+	*/
+  ApplicationContainer clientApps;
+
+  NodeContainer csmaClients;
+  csmaClients.Create(1);
+  csmaClients.Add(ueNodes.Get(0));
+
+  internet.Install (csmaClients);
+  NetDeviceContainer devicesLeft = csma.Install (csmaClients);
+  Ipv4AddressHelper ipv4Left;
+  ipv4Left.SetBase ("10.1.1.0", "255.255.255.0");
+  Ipv4InterfaceContainer interfacesLeft = ipv4Left.Assign (devicesLeft);
+
+  for (uint32_t u = 0; u < ueNodes.GetN (); ++u)
+      {
+	  	// zero is connected to csma tap
+	    if (u != 0){
+	    	/*HttpClientHelper client(interfacesRight.GetAddress(1), port,
+	    		                    "content/segments/BigBuckBunny/bunny_2s/vid1.mpd.gz", "localhost");*/
+	    	HttpClientHelper client(interfacesRight.GetAddress(1), port,
+	    		  	    "bbb/BigBuckBunny_15s_onDemand_2014_05_09.mpd", "localhost");
+	    		    clientApps.Add(client.Install(ueNodes.Get(u)));
+	    }
+
+        if (!disableDl)
+          {
+            PacketSinkHelper dlPacketSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), dlPort));
+            serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get (u)));
+
+            UdpClientHelper dlClient (ueIpIface.GetAddress (u), dlPort);
+            dlClient.SetAttribute ("Interval", TimeValue (interPacketInterval));
+            dlClient.SetAttribute ("MaxPackets", UintegerValue (1000000));
+            clientApps.Add (dlClient.Install (remoteHost));
+          }
+
+        if (!disableUl)
+          {
+            ++ulPort;
+            PacketSinkHelper ulPacketSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), ulPort));
+            serverApps.Add (ulPacketSinkHelper.Install (remoteHost));
+
+            UdpClientHelper ulClient (remoteHostAddr, ulPort);
+            ulClient.SetAttribute ("Interval", TimeValue (interPacketInterval));
+            ulClient.SetAttribute ("MaxPackets", UintegerValue (1000000));
+            clientApps.Add (ulClient.Install (ueNodes.Get(u)));
+          }
+
+        if (!disablePl && numberOfEnbs > 1)
+          {
+            ++otherPort;
+            PacketSinkHelper packetSinkHelper ("ns3::UdpSocketFactory", InetSocketAddress (Ipv4Address::GetAny (), otherPort));
+            serverApps.Add (packetSinkHelper.Install (ueNodes.Get (u)));
+
+            UdpClientHelper client (ueIpIface.GetAddress (u), otherPort);
+            client.SetAttribute ("Interval", TimeValue (interPacketInterval));
+            client.SetAttribute ("MaxPackets", UintegerValue (1000000));
+            clientApps.Add (client.Install (ueNodes.Get ((u + 1) % numberOfEnbs)));
+          }
+      }
+  clientApps.Start (Seconds (2));
+
+
+  TapBridgeHelper tapBridgeServer(interfacesRight.GetAddress (1));
+  tapBridgeServer.SetAttribute ("Mode", StringValue ("UseBridge"));
+  tapBridgeServer.SetAttribute ("DeviceName", StringValue ("tap-right"));
+  tapBridgeServer.Install (csmaNodes.Get (1), devicesRight.Get (1));
+
+  TapBridgeHelper tapBridgeClient(interfacesLeft.GetAddress (0));
+  tapBridgeClient.SetAttribute ("Mode", StringValue ("UseBridge"));
+  tapBridgeClient.SetAttribute ("DeviceName", StringValue ("tap-left"));
+  tapBridgeClient.Install (csmaClients.Get (0), devicesLeft.Get (0));
+
+
+  lteHelper->EnableTraces ();
+  // Uncomment to enable PCAP tracing
+  p2ph.EnablePcapAll("lena-simple-epc-p2p-", true);
+  csma.EnablePcapAll("lena-simple-epc-csma-", true);
+  // NS_LOG_UNCOND("Installing Routing Tables");
+  // Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
+
+  AsciiTraceHelper ascii;
+  p2ph.EnableAsciiAll (ascii.CreateFileStream ("demo.tr"));
+  ipv4RoutingHelper.PrintRoutingTableAllAt(Seconds(5),ascii.CreateFileStream ("csmaRoutingTable.txt"), Time::S);
+  Ipv4RoutingHelper::PrintRoutingTableEvery(Seconds (5), remoteHost, ascii.CreateFileStream ("hostRoutingTable.txt"), Time::S);
+
+  /*
+  // Create two ghost nodes.  The first will represent the virtual machine host
+  // on the left side of the network; and the second will represent the VM on
+  // the right side.
+  //
+  NodeContainer nodes;
+  nodes.Create (4);
+
+  NodeContainer nodesLeft;
+  nodesLeft.Add (nodes.Get(0));
+  nodesLeft.Add (nodes.Get(1));
+
+  NodeContainer nodesRight;
+  nodesRight.Add (nodes.Get(2));
+  nodesRight.Add (nodes.Get(3));
+
+  NetDeviceContainer devicesRight = csma.Install (nodesRight);
+
+  // P2P config
+  // Config::SetDefault("ns3::TcpL4Protocol::SocketType", StringValue("ns3::TcpNewReno")); // default
+
+
+  // Config::SetDefault ("ns3::QueueBase::MaxSize", QueueSizeValue (QueueSize (QueueSizeUnit::PACKETS, 20)));
+  // Config::SetDefault("ns3::DropTailQueue::MaxPackets", UintegerValue (80));
+
+  InternetStackHelper internetLeft;
+  internetLeft.Install (nodesLeft);
+
+  InternetStackHelper internetRight;
+  internetRight.Install (nodesRight);
+
+  PointToPointHelper p2p; // settings are already defined above
+  NetDeviceContainer p2pDevices =  p2p.Install (nodes.Get(1), nodes.Get(2));
+  Names::Add("Client", nodes.Get(1));
+  Names::Add("Server", nodes.Get(2));
+
+  Ipv4AddressHelper ipv4P2P;
+  ipv4P2P.SetBase ("10.1.2.0", "255.255.255.0");
+  Ipv4InterfaceContainer interfacesP2P = ipv4P2P.Assign (p2pDevices);
+
+  Ipv4AddressHelper ipv4Left;
+  ipv4Left.SetBase ("10.1.1.0", "255.255.255.0");
+  Ipv4InterfaceContainer interfacesLeft = ipv4Left.Assign (devicesLeft);
+
+
+  NS_LOG_UNCOND("Installing Routing Tables");
+  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
+
+  AsciiTraceHelper ascii;
+  p2p.EnableAsciiAll (ascii.CreateFileStream ("demo.tr"));
+  p2p.EnablePcapAll ("demo");
+  Ipv4GlobalRoutingHelper::PrintRoutingTableEvery(Seconds (5), nodes.Get (0), ascii.CreateFileStream ("csmaRoutingTable.txt"), Time::S);
+
+  //
+  // Use the TapBridgeHelper to connect to the pre-configured tap devices for
+  // the left side.  We go with "UseBridge" mode since the CSMA devices support
+  // promiscuous mode and can therefore make it appear that the bridge is
+  // extended into ns-3.  The install method essentially bridges the specified
+  // tap to the specified CSMA device.
+  //
+  TapBridgeHelper tapBridgeClient;// (interfacesLeft.GetAddress (1));
+  tapBridgeClient.SetAttribute ("Mode", StringValue ("UseBridge"));
+  // tapBridge.SetAttribute ("Mode", StringValue ("ConfigureLocal"));
+  tapBridgeClient.SetAttribute ("DeviceName", StringValue ("tap-left"));
+  tapBridgeClient.Install (nodesLeft.Get (0), devicesLeft.Get (0));
+
+  //
+  // Connect the right side tap to the right side CSMA device on the right-side
+  // ghost node.
+  //
+  TapBridgeHelper tapBridgeServer;// (interfacesLeft.GetAddress (1));
+  tapBridgeServer.SetAttribute ("Mode", StringValue ("UseBridge"));
+  tapBridgeServer.SetAttribute ("DeviceName", StringValue ("tap-right"));
+  tapBridgeServer.Install (nodesRight.Get (1), devicesRight.Get (1));
+   */
+  //
+  // Run the simulation for ten minutes to give the user time to play around
+  //
+  Simulator::Stop (Seconds (600.));
+  ns3::AnimationInterface *anim;
+  anim = new AnimationInterface ("animation.xml");
+  anim->AddResource("");
+  Simulator::Run ();
+  Simulator::Destroy ();
+}
