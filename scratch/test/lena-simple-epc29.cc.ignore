/* -*-  Mode: C++; c-file-style: "gnu"; indent-tabs-mode:nil; -*- */
/*
 * Copyright (c) 2011 Centre Tecnologic de Telecomunicacions de Catalunya (CTTC)
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Author: Jaume Nin <jaume.nin@cttc.cat>
 */

#include "ns3/lte-helper.h"
#include "ns3/epc-helper.h"
#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/ipv4-static-routing.h"
#include "ns3/ipv4-list-routing.h"
#include "ns3/ipv4-routing-table-entry.h"
#include "ns3/ipv4-static-routing-helper.h"
#include "ns3/ipv4-list-routing-helper.h"
#include "ns3/internet-module.h"
#include "ns3/mobility-module.h"
#include "ns3/lte-module.h"
#include "ns3/applications-module.h"
#include "ns3/config-store.h"
#include "ns3/tap-bridge-module.h"
//#include "ns3/gtk-config-store.h"
#include "ns3/csma-module.h"
#include "ns3/point-to-point-helper.h"
#include "ns3/flow-monitor-module.h"

using namespace ns3;

/**
 * Sample simulation script for LTE+EPC. It instantiates several eNodeB,
 * attaches one UE per eNodeB starts a flow for each UE to  and from a remote host.
 * It also  starts yet another flow between each UE pair.
 */
NS_LOG_COMPONENT_DEFINE ("EpcFirstExample");
int
main (int argc, char *argv[])
{

	LogComponentEnable("Ipv4ListRouting", LOG_LEVEL_ALL);
  uint16_t numberOfNodes = 1;
  double simTime = 3600;
  double distance = 100.0;
  double interPacketInterval = 100;


  // Command line arguments
  CommandLine cmd;
  cmd.AddValue("numberOfNodes", "Number of eNodeBs + UE pairs", numberOfNodes);
  cmd.AddValue("simTime", "Total duration of the simulation [s])", simTime);
  cmd.AddValue("distance", "Distance between eNBs [m]", distance);
  cmd.AddValue("interPacketInterval", "Inter packet interval [ms])", interPacketInterval);
  cmd.Parse(argc, argv);

  GlobalValue::Bind ("SimulatorImplementationType", StringValue ("ns3::RealtimeSimulatorImpl"));
  GlobalValue::Bind ("ChecksumEnabled", BooleanValue (true));

  ConfigStore inputConfig;
  inputConfig.ConfigureDefaults();

  Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();
  Ptr<PointToPointEpcHelper>  epcHelper = CreateObject<PointToPointEpcHelper> ();
  lteHelper->SetEpcHelper (epcHelper);

  // parse again so you can override default values from the command line
  cmd.Parse(argc, argv);

  Ptr<Node> pgw = epcHelper->GetPgwNode ();

  NodeContainer leftNodes;
  leftNodes.Create (2);
  Ptr<Node> leftTapLeg = leftNodes.Get (1);
  Ptr<Node> remoteHost = leftNodes.Get (0);


  // Create the Internet
  CsmaHelper csma;
  csma.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
  csma.SetChannelAttribute ("Delay", TimeValue (Seconds (0.010)));

  NetDeviceContainer internetDevicesLeft = csma.Install (leftNodes);

  InternetStackHelper internet;
  internet.Install (leftNodes);

  Ipv4AddressHelper ipv4Left;
  ipv4Left.SetBase ("10.1.3.0", "255.255.255.0");
  Ipv4InterfaceContainer interfacesLeft = ipv4Left.Assign (internetDevicesLeft);
  // interface 0 is localhost, 1 is the p2p device
  //Ipv4Address remoteHostAddr = interfacesLeft.GetAddress (1);
  //Ipv4Address leftMidNodeAddr = interfacesLeft.GetAddress (1);

  TapBridgeHelper tapBridgeLeft;
  tapBridgeLeft.SetAttribute ("Mode", StringValue ("UseLocal"));
  tapBridgeLeft.SetAttribute ("DeviceName", StringValue ("tap-right"));
  tapBridgeLeft.Install (leftTapLeg, internetDevicesLeft.Get (1));

  PointToPointHelper p2ph;
  p2ph.SetDeviceAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
  p2ph.SetDeviceAttribute ("Mtu", UintegerValue (1500));
  p2ph.SetChannelAttribute ("Delay", TimeValue (Seconds (0.010)));
  NetDeviceContainer internetDevices = p2ph.Install (pgw,remoteHost);
  Ipv4AddressHelper ipv4h;
  ipv4h.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);
  // interface 0 is localhost, 1 is the p2p device
  //Ipv4Address remoteHostAddr = internetIpIfaces.GetAddress (0);

  NodeContainer ueNodes;
  NodeContainer enbNodes;
  enbNodes.Create(1);
  ueNodes.Create(numberOfNodes);

  // Install Mobility Model
  Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();
  for (uint16_t i = 0; i < numberOfNodes; i++)
    {
      positionAlloc->Add (Vector(distance * i, 0, 0));
    }
  MobilityHelper mobility;
  mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel");
  mobility.SetPositionAllocator(positionAlloc);
  mobility.Install(enbNodes);
  mobility.Install(ueNodes);

  // Install LTE Devices to the nodes
  NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);
  NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);

  // Install the IP stack on the UEs
  internet.Install (ueNodes);
  Ipv4InterfaceContainer ueIpIface;
  ueIpIface = epcHelper->AssignUeIpv4Address (NetDeviceContainer (ueLteDevs));

  Ipv4StaticRoutingHelper ipv4RoutingHelper;

  for (uint32_t u = 0; u < ueNodes.GetN (); ++u)
    {
      Ptr<Node> ueNode = ueNodes.Get (u);
      // Set the default gateway for the UE
      Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueNode->GetObject<Ipv4> ());
      ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);
    }

  for (uint16_t i = 0; i < numberOfNodes; i++)
      {
        lteHelper->Attach (ueLteDevs.Get(i), enbLteDevs.Get(0));
        // side effect: the default EPS bearer will be activated
      }
  //lteHelper->ActivateDedicatedEpsBearer (ueLteDevs, EpsBearer (EpsBearer::NGBR_VIDEO_TCP_DEFAULT), EpcTft::Default ());

  NodeContainer rightNodes;
  rightNodes.Create (1);
  internet.Install (rightNodes);

  NodeContainer csmaRightNodes (rightNodes.Get (0), ueNodes.Get (0));

  CsmaHelper csmaRight;
  csmaRight.SetChannelAttribute ("DataRate", DataRateValue (DataRate ("100Gb/s")));
  csmaRight.SetChannelAttribute ("Delay", TimeValue (Seconds (0.010)));

  NetDeviceContainer internetDevicesRight = csmaRight.Install (csmaRightNodes);
  Ipv4AddressHelper ipv4Right;
  ipv4Right.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer interfacesRight = ipv4Right.Assign (internetDevicesRight);

  TapBridgeHelper tapBridgeRight;
  tapBridgeRight.SetAttribute ("Mode", StringValue ("UseLocal"));
  tapBridgeRight.SetAttribute ("DeviceName", StringValue ("tap-left"));
  tapBridgeRight.Install (rightNodes.Get (0), internetDevicesRight.Get (0));

  Ipv4Address gateway = epcHelper->GetUeDefaultGatewayAddress ();
  std::cout << gateway << std::endl;
  
  Ptr<Node> ueNodeZero = ueNodes.Get (0);
  Ptr<Ipv4> ipv4 = ueNodeZero->GetObject<Ipv4> (); 
  Ipv4Address addr1 = ipv4->GetAddress (1, 0).GetLocal ();
  std::cout << addr1 << std::endl;
  Ipv4Address addr2 = ipv4->GetAddress (2, 0).GetLocal ();
  std::cout << addr2 << std::endl;

  Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (remoteHost->GetObject<Ipv4> ());
  remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("7.0.0.0"), Ipv4Mask ("255.0.0.0"), 2);
  remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("10.1.1.0"), Ipv4Mask ("255.255.255.0"), gateway, 2);
  remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address ("10.1.3.0"), Ipv4Mask ("255.255.255.0"), Ipv4Address ("10.1.3.2"), 1);

  /*lteHelper->EnableTraces ();
  // Uncomment to enable PCAP tracing
  p2ph.EnablePcapAll("lena-epc-p2p");
  csma.EnablePcapAll("lena-epc-csma-left",true);
  csmaRight.EnablePcapAll("lena-epc-csma-right",true);*/

  Simulator::Stop(Seconds(simTime));
  //Simulator::EnableParallelSimulation();
  Simulator::Run();

  NS_LOG_UNCOND("Done");

  Simulator::Destroy();
  return 0;

}

