/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

//
// This is an illustration of how one could use virtualization techniques to
// allow running applications on virtual machines talking over simulated
// networks.
//
// The actual steps required to configure the virtual machines can be rather
// involved, so we don't go into that here.  Please have a look at one of
// our HOWTOs on the nsnam wiki for more details about how to get the 
// system confgured.  For an example, have a look at "HOWTO Use Linux 
// Containers to set up virtual networks" which uses this code as an 
// example.
//
// The configuration you are after is explained in great detail in the 
// HOWTO, but looks like the following:
//
//  +----------+                           +----------+
//  | virtual  |                           | virtual  |
//  |  Linux   |                           |  Linux   |
//  |   Host   |                           |   Host   |
//  |          |                           |          |
//  |   eth0   |                           |   eth0   |
//  +----------+                           +----------+
//       |                                      |
//  +----------+                           +----------+
//  |  Linux   |                           |  Linux   |
//  |  Bridge  |                           |  Bridge  |
//  +----------+                           +----------+
//       |                                      |
//  +------------+                       +-------------+
//  | "tap-left" |                       | "tap-right" |
//  +------------+                       +-------------+
//       |           n0            n1           |
//       |       +--------+    +--------+       |
//       +-------|  tap   |    |  tap   |-------+
//               | bridge |    | bridge |
//               +--------+    +--------+
//               |CSMA|P2P|====|P2P|CSMA|
//               +--------+    +--------+
//
//
//
//
//
//
#include <iostream>
#include <fstream>

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/csma-module.h"
#include "ns3/tap-bridge-module.h"
#include "ns3/internet-module.h"
#include "ns3/node-throughput-tracer.h"
#include "ns3/ipv4-static-routing-helper.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/dash-streaming-module.h"
#include "ns3/netanim-module.h"

using namespace std;
using namespace ns3;

#include <unistd.h>
#include <iostream>

std::string GetCurrentWorkingDir( void ) {
  char buff[250];
  char* cwd = getcwd( buff, 250 );
  std::cout << cwd;
  std::string current_working_dir(buff);
  return current_working_dir;
}

NS_LOG_COMPONENT_DEFINE ("TapCsmaVirtualMachineExample");

int 
main (int argc, char *argv[])
{
  CommandLine cmd;
  cmd.Parse (argc, argv);

  //
  // We are interacting with the outside, real, world.  This means we have to 
  // interact in real-time and therefore means we have to use the real-time
  // simulator and take the time to calculate checksums.
  //
  GlobalValue::Bind ("SimulatorImplementationType", StringValue ("ns3::RealtimeSimulatorImpl"));
  GlobalValue::Bind ("ChecksumEnabled", BooleanValue (true));

  //
  // Create two ghost nodes.  The first will represent the virtual machine host
  // on the left side of the network; and the second will represent the VM on 
  // the right side.
  //
  NodeContainer nodes;
  nodes.Create (4);

  NodeContainer nodesLeft;
  nodesLeft.Add (nodes.Get(0));
  nodesLeft.Add (nodes.Get(1));

  NodeContainer nodesRight;
  nodesRight.Add (nodes.Get(2));
  nodesRight.Add (nodes.Get(3));

  //
  // Use a CsmaHelper to get a CSMA channel created, and the needed net 
  // devices installed on both of the nodes.  The data rate and delay for the
  // channel can be set through the command-line parser.  For example,
  //
  // ./waf --run "tap=csma-virtual-machine --ns3::CsmaChannel::DataRate=10000000"
  //
  CsmaHelper csma;
  NetDeviceContainer devicesLeft = csma.Install (nodesLeft);
  NetDeviceContainer devicesRight = csma.Install (nodesRight);

  // P2P config
  Config::SetDefault("ns3::TcpSocket::SegmentSize", UintegerValue (1430)); // 1460 is too large it seems
  Config::SetDefault("ns3::PointToPointNetDevice::Mtu", UintegerValue (1500)); // ETHERNET MTU
  Config::SetDefault("ns3::TcpL4Protocol::SocketType", StringValue("ns3::TcpNewReno")); // default

  // Configure Network Speed etc...
  Config::SetDefault("ns3::PointToPointNetDevice::DataRate", StringValue("10Mbps"));
  Config::SetDefault("ns3::PointToPointChannel::Delay", StringValue("5ms"));

  Config::SetDefault ("ns3::QueueBase::MaxSize", QueueSizeValue (QueueSize (QueueSizeUnit::PACKETS, 20)));
  // Config::SetDefault("ns3::DropTailQueue::MaxPackets", UintegerValue (80));

  InternetStackHelper internetLeft;
  internetLeft.Install (nodesLeft);

  InternetStackHelper internetRight;
  internetRight.Install (nodesRight);

  PointToPointHelper p2p; // settings are already defined above
  NetDeviceContainer p2pDevices =  p2p.Install (nodes.Get(1), nodes.Get(2));
  Names::Add("Client", nodes.Get(1));
  Names::Add("Server", nodes.Get(2));

  Ipv4AddressHelper ipv4P2P;
  ipv4P2P.SetBase ("10.1.2.0", "255.255.255.0");
  Ipv4InterfaceContainer interfacesP2P = ipv4P2P.Assign (p2pDevices);

  Ipv4AddressHelper ipv4Left;
  ipv4Left.SetBase ("10.1.1.0", "255.255.255.0");
  Ipv4InterfaceContainer interfacesLeft = ipv4Left.Assign (devicesLeft);
  
  Ipv4AddressHelper ipv4Right;
  ipv4Right.SetBase ("10.1.3.0", "255.255.255.0");
  Ipv4InterfaceContainer interfacesRight = ipv4Right.Assign (devicesRight);
  
  NS_LOG_UNCOND("Installing Routing Tables");
  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();
  
  AsciiTraceHelper ascii;
  p2p.EnableAsciiAll (ascii.CreateFileStream ("demo.tr"));
  p2p.EnablePcapAll ("demo");
  Ipv4GlobalRoutingHelper::PrintRoutingTableEvery(Seconds (5), nodes.Get (0), ascii.CreateFileStream ("csmaRoutingTable.txt"), Time::S);
  
  //
  // Use the TapBridgeHelper to connect to the pre-configured tap devices for 
  // the left side.  We go with "UseBridge" mode since the CSMA devices support
  // promiscuous mode and can therefore make it appear that the bridge is 
  // extended into ns-3.  The install method essentially bridges the specified
  // tap to the specified CSMA device.
  //
  TapBridgeHelper tapBridgeClient;// (interfacesLeft.GetAddress (1));
  tapBridgeClient.SetAttribute ("Mode", StringValue ("UseBridge"));
  // tapBridge.SetAttribute ("Mode", StringValue ("ConfigureLocal"));
  tapBridgeClient.SetAttribute ("DeviceName", StringValue ("tap-left"));
  tapBridgeClient.Install (nodesLeft.Get (0), devicesLeft.Get (0));

  //
  // Connect the right side tap to the right side CSMA device on the right-side
  // ghost node.
  //
  TapBridgeHelper tapBridgeServer;// (interfacesLeft.GetAddress (1));
  tapBridgeServer.SetAttribute ("Mode", StringValue ("UseBridge"));
  tapBridgeServer.SetAttribute ("DeviceName", StringValue ("tap-right"));
  tapBridgeServer.Install (nodesRight.Get (1), devicesRight.Get (1));

  //
  // Run the simulation for ten minutes to give the user time to play around
  //
  Simulator::Stop (Seconds (600.));
  ns3::AnimationInterface *anim;
  anim = new AnimationInterface ("animation.xml");
  anim->AddResource("");
    
  Simulator::Run ();
  Simulator::Destroy ();
}
